
import json
from core.config import setting
from langchain_community.vectorstores import FAISS
from langchain_core.example_selectors import SemanticSimilarityExampleSelector
from langchain_openai import OpenAIEmbeddings

# with open(setting.EXAMPLES, 'r') as json_file:
#     examples = json.load(json_file)
# print(examples["examples"])

vector_store = FAISS
def examples_selector():

    # example_selector = SemanticSimilarityExampleSelector.from_examples(
    #     examples,
    #     OpenAIEmbeddings(),
    #     vector_store,
    #     k=k,
    #     input_keys=["input"],
    # )
    with open(setting.EXAMPLES, 'r') as json_file:
        examples = json.load(json_file)
    examples=examples["examples"]
    return SemanticSimilarityExampleSelector.from_examples(
        examples,
        OpenAIEmbeddings(),
        vector_store,
        k=4,
        input_keys=["input"]
    )

# example_selector.select_examples({"input": "how many artists are there?"})


############################ BELOW IS FOR UPDATING THE examples.json FILE USING PYTHON ################################
examples = [
    {"input": "get me accounts.", "query": "SELECT DISTINCT account_id FROM accounts;"},
    {
        "input": "How many tickets generated by users in last week?",
        "query": "SELECT COUNT(*) FROM conversations WHERE created_at >= DATE_SUB(NOW(), INTERVAL 1 WEEK);",
    },
    {
        "input": "How many tickets all agents resolved in last week?",
        "query": "SELECT COUNT(*) FROM agent_analytics WHERE is_resolved = 1 AND updated_at >= DATE_SUB(NOW(), INTERVAL 1 WEEK);",
    },
    {
        "input": "What is the Average First response time of the tickets in last week?",
        "query": "SELECT AVG(agent_frt) AS average_first_response_time FROM agent_analytics WHERE created_at >= DATE_SUB(NOW(), INTERVAL 1 WEEK);",
    },
    {
        "input": "What is the Average First response time of the tickets in last 2 weeks?",
        "query": "SELECT AVG(agent_frt) AS average_first_response_time FROM agent_analytics WHERE created_at >= DATE_SUB(NOW(), INTERVAL 2 WEEK);",
    },
    {
        "input": "How many tickets were in an open state in the last 2 weeks?",
        "query": "SELECT COUNT(*) FROM conversations WHERE status = 0 AND updated_at >= DATE_SUB(NOW(), INTERVAL 2 WEEK);",
    },
    {
        "input": "How many marketing lead tickets were generated in the last 2 weeks?",
        "query": "SELECT COUNT(*) FROM conversations WHERE is_conv_marketing = 1 AND created_at >= DATE_SUB(NOW(), INTERVAL 2 WEEK);",
    },
    {
        "input": "How many tickets were resolved in the last 2 weeks?",
        "query": "SELECT COUNT(*) FROM conversations WHERE status = 1 AND updated_at >= DATE_SUB(NOW(), INTERVAL 2 WEEK);",
    },
    {
        "input": "How many tickets were closed in the last 2 weeks?",
        "query": "SELECT COUNT(*) FROM conversations WHERE status = 3 AND updated_at >= DATE_SUB(NOW(), INTERVAL 2 WEEK);",
    },
    {
        "input": "How many tickets were resolved by Abdul Rahman in the last week?",
        "query": "SELECT COUNT(*) FROM conversations WHERE resolved_by = 'Abdul Rahman' AND updated_at >= DATE_SUB(NOW(), INTERVAL 7 DAY);",
    },
    {
        "input": "What is the status of the tickets assigned to Abdul Rahman in the last week?",
        "query": "SELECT status FROM conversations WHERE assignee_id = (SELECT id FROM accounts WHERE name = 'Abdul Rahman') AND created_at >= DATE_SUB(NOW(), INTERVAL 1 WEEK);",
    },
    {
        "input": "How many tickets were handed off to agents on 10th October?",
        "query": "SELECT COUNT(*) FROM conversations WHERE assigned_by = 'agent' AND DATE(assigned_at) = '2023-10-10';",
    },
]
data = {"examples": examples}

# Open a file in write mode
with open('examples.json', 'w') as json_file:
    # Write the dictionary to the file
    json.dump(data, json_file, indent=4)
############################ ABOVE IS FOR UPDATING THE examples.json FILE USING PYTHON ################################